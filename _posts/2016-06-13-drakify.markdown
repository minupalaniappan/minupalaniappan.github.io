---
layout: project
title: "Using NodeJS to build the ultimate lyric tool"
date:   2016-05-29
categories: projects
summary: "Never search for lyrics in a YouTube video anymore"
link: ""
---
I built a tool that lets you speak a lyric and identify the exact timestamp in the music video.

### Source
* [Github code](https://github.com/minupalaniappan/drakify)

### How it started
Drakify was one of those projects that only materialized at the end of competition. I was at Cal Hacks 2016, and I was still without a solid idea midway through hacking. I had always wanted to play around with [Rap Genius](https://rap.genius.com), so I thought about building some sort of lyrics tool. I was also interested in Node at the time, so building some sort of active listener was what I ended up ideating.

### Development Proccess
The roadmap was simple; build a button that would wait for audio input, an embedded YT video at a specific timestamp and "Genius" annotations that were written at that specific line of music.

* Retrieving and transcribing audio
Major thanks to the open source project [Annyang](https://github.com/TalAter/annyang). Annyang is incredibly effective at recognizing speech and its powered on Javascript. Here is how Annyang works...

```javascript
search *something': function(something) {
$.ajax({
    url: "https://api.genius.com/search?q=" + something,
    type: "GET",
    headers: {"Authorization": "..."},
		success: function (data) {
		var title = data.response.hits[0].result.title;
		var artist = "By " + data.response.hits[0].result.primary_artist.name;
        document.getElementById("artist").innerHTML = title;
        document.getElementById("title").innerHTML = artist;
        var str = data.response.hits[0].result.id;
        $.ajax({
		    url: "https://api.genius.com/songs/" + str,
		    type: "GET",
		    headers: {"Authorization": "..."},
				success: function (data) {
	        }
		});
    }
});
```

In this case ```*something``` is the portion of text that is transcribed from audio. Annyang allows you mobilize audio clips and place them anywhere in the function. It makes your voice modular within the code, resulting in great usability. After getting the text query from your voice, you query it to Genius's API and get JSON returned on the Artist and title of the song. To get this type of data we use ```$.ajax```.

We then set up our YT object to start quering specific parts of the video. Its done like so...

```javascript
"https://www.googleapis.com/youtube/v3/search", {
	part: 'snippet',
	maxResults: 10,
	order: 'viewCount',
	q: something,
	type: 'video',
	key: '...'
},
```
Here, I construct a JSON object that is returned from a YouTube Ajax call. YT is typically very accurate, so cutting ```maxResults``` to just 10 results and optimizing by ```viewCount``` is all that is needed to get the desired video.
In this case, ```something``` is the transcribed text from annyang.

With the fetched video ID, we can call upon the embedded YouTube video.

```javascript
var videoToPlay = "https://www.youtube.com/watch?v=" + item.id.videoId + "&autoplay=1";
var videoToPlay = videoToPlay.replace("watch?v=", "v/");
```
Thanks for reading!
